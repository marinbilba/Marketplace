// <auto-generated />
using System;
using MarketplaceAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MarketplaceAPI.Migrations
{
    [DbContext(typeof(MarketplaceContext))]
    [Migration("20210319111742_InitialCrate")]
    partial class InitialCrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MarketplaceAPI.Model.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CustomerUsername")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerUsername")
                        .IsUnique();

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerUsername = "test",
                            TotalPrice = 0m
                        });
                });

            modelBuilder.Entity("MarketplaceAPI.Model.CartProduct", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("MarketplaceAPI.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Computers"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Toys"
                        });
                });

            modelBuilder.Entity("MarketplaceAPI.Model.Customer", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Username");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Username = "test",
                            Password = "123"
                        });
                });

            modelBuilder.Entity("MarketplaceAPI.Model.CustomerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerUsername")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CustomerUsername");

                    b.ToTable("CustomerOrder");
                });

            modelBuilder.Entity("MarketplaceAPI.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Lorem",
                            Name = "ACER G502",
                            Price = 350m,
                            Stock = 19,
                            ThumbnailUrl = "https://res.cloudinary.com/dxfq3iotg/image/upload/v1571750967/Ecommerce/ef192a21ec96.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Lorem",
                            Name = "ACER Predator",
                            Price = 1350m,
                            Stock = 5,
                            ThumbnailUrl = "https://www.komplett.dk/img/p/1200/1168528.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Lorem",
                            Name = "Doge",
                            Price = 510m,
                            Stock = 500,
                            ThumbnailUrl = "https://www.petplanet.co.uk/image/500x500/99_56102_1529569131_bca1d9.jpg"
                        });
                });

            modelBuilder.Entity("MarketplaceAPI.Model.Cart", b =>
                {
                    b.HasOne("MarketplaceAPI.Model.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("MarketplaceAPI.Model.Cart", "CustomerUsername");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MarketplaceAPI.Model.CartProduct", b =>
                {
                    b.HasOne("MarketplaceAPI.Model.Cart", "Cart")
                        .WithMany("CartProduct")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketplaceAPI.Model.Product", "Product")
                        .WithMany("CartProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketplaceAPI.Model.CustomerOrder", b =>
                {
                    b.HasOne("MarketplaceAPI.Model.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketplaceAPI.Model.Customer", "Customer")
                        .WithMany("CustomerOrder")
                        .HasForeignKey("CustomerUsername");

                    b.Navigation("Cart");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MarketplaceAPI.Model.Product", b =>
                {
                    b.HasOne("MarketplaceAPI.Model.Cart", null)
                        .WithMany("Products")
                        .HasForeignKey("CartId");

                    b.HasOne("MarketplaceAPI.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MarketplaceAPI.Model.Cart", b =>
                {
                    b.Navigation("CartProduct");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketplaceAPI.Model.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketplaceAPI.Model.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("CustomerOrder");
                });

            modelBuilder.Entity("MarketplaceAPI.Model.Product", b =>
                {
                    b.Navigation("CartProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
