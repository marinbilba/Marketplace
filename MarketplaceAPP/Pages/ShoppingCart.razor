@page "/cart"
@using MarketplaceAPP.Data
@using MarketplaceAPP.Authentication
@using MarketplaceAPP.Model
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMarketplaceService MarketplaceService;


<RadzenContent Container="main">
    <ChildContent>
        <RadzenSteps NextText="Checkout" Change="@((args) => StepChange(args))">
            <Steps>
                @* First step *@
                <RadzenStepsItem Text="Review items" >
                    <div class="panel panel-info">
                        <div class="panel-heading">
                            <h3 class="panel-title">Order Summary</h3>
                        </div>
                        <div class="panel-body">
                            <div id="update-message">
                            </div>
                            <table class="table table-striped table-hover ">
                                <thead>
                                <tr>
                                    <th>
                                        Item Name
                                    </th>
                                    <th>
                                        Price (each)
                                    </th>
                                    <th>Remove</th>
                                </tr>
                                </thead>
                                @if (customerCart != null)
                                {
                                    @foreach (var product in customerCart.Products)
                                    {
                                        <tr>
                                            <td>
                                                @product.Name
                                            </td>
                                            <td>
                                                @product.Price
                                            </td>
                                            <td>
                                                <a style="cursor:pointer" @onclick="(() => RemoveFromCart(product))">Remove From Cart</a>
                                            </td>
                                        </tr>
                                    }
                                    <tr class="info">
                                        <td></td>
                                        <td id="cart-total">
                                            Total : @customerCart.TotalPrice $
                                        </td>
                                    </tr>
                                }

                            </table>
                        </div>
                    </div>

                </RadzenStepsItem>
                <RadzenStepsItem Text="Checkout" >
                   
                    <RadzenFieldset Text="Purchase Info">
                       
                                <RadzenLabel Text="Delivery address"  /><RadzenTextArea></RadzenTextArea>
                                <div class="row offset-7">
                                    <button type="button" class="btn btn-success" @onclick="(PlaceOrder)">Buy</button>
                                    </div>
                    </RadzenFieldset>

                </RadzenStepsItem>

            </Steps>
        </RadzenSteps>
    </ChildContent>
</RadzenContent>


@code {
    public DateTime CardExpDate { get; set; }
    private Customer _currentUser;
    private Cart customerCart;
   

    protected override async Task OnInitializedAsync()
    {
        _currentUser = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetCachedUser();
        try
        {
            customerCart = await MarketplaceService.GetCustomerCartAsync(_currentUser);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void StepChange(int args)
    {
        switch (args)
        {
            case 0:
                Console.WriteLine("first");
                break;
            case 1:
                Console.WriteLine("Second");
                break;
        }
    }

    private bool _firstStepDisable;

    private async Task RemoveFromCart(Product product)
    {
        try
        {
            await MarketplaceService.DeleteProductFromCart(product.Id, customerCart.Id);
            customerCart.TotalPrice -= product.Price;
            customerCart.Products.Remove(product);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
           
        }
    }

    private async Task PlaceOrder()
    {
        CustomerOrder customerOrder = new CustomerOrder()
        {
            CartId = customerCart.Id,
            CustomerUsername = _currentUser.Username,
        };
        try
        {
        await MarketplaceService.PlaceOrderAsync(customerOrder);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

    }

}