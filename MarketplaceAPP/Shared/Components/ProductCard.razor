@using MarketplaceAPP.Model
@using MarketplaceAPP.Data
@using MarketplaceAPP.Authentication
@inject IMarketplaceService MarketplaceService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService
<link rel="stylesheet" type="text/css" href="css/Components/productCard.css">

<div class="col-md-4">
    <figure class="card card-product-grid card-lg" >
        <a style="cursor:pointer" @onclick="(() => ViewProduct(Product))" class="img-wrap" data-abc="true">
            <img src="@Product.ThumbnailUrl">
        </a>
        <figcaption class="info-wrap">
            <div class="row">
                <div class="col-md-8">
                    <a href="#" class="title" data-abc="true"></a>@Product.Name
                </div>
            </div>
        </figcaption>
        <div class="bottom-wrap">
            <a style="cursor:pointer" @onclick="(() => AddToCart(Product))" class="btn btn-primary float-right" data-abc="true"> Add to cart</a>
            <div class="price-wrap">
                <span class="price h5">@Product.Price</span> <br> <small class="text-success">Free shipping</small>
            </div>
        </div>
    </figure>
</div>
@if (_confirmUpdateNotification)
{  
    toastService.ShowSuccess($"{Product.Name} added to your cart", "Success!");
    _confirmUpdateNotification = false;

} 
@if(_errorItemAlreadyInCart){
    toastService.ShowError($"{Product.Name} already in your cart");
    _errorItemAlreadyInCart = false;
}

@code {
    // ConfirmNotification
    private bool _confirmUpdateNotification;
    // ConfirmNotification
    private bool _errorItemAlreadyInCart;

    [Parameter]
    public Product Product { get; set; }

    private Customer _currentUser;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetCachedUser();
    }


    private void ViewProduct(Product product)
    {
    }

    private async Task AddToCart(Product product)
    {
        try
        {
            await MarketplaceService.AddProductToCartAsync(product, _currentUser.Username);
            _confirmUpdateNotification = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorItemAlreadyInCart = true;
        }
     

    }

}